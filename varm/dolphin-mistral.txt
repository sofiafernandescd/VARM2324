Here are Python implementations for each of these exercises:

a. Face detection using Haar Cascade Classifier with OpenCV
```python
import cv2

# Load the pre-trained face detector
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

def detect_faces(img):
    # Convert image to grayscale
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Detect faces in the grayscale image
    detected_faces = face_cascade.detectMultiScale(gray_img, 1.3, 5)
    
    for (x, y, w, h) in detected_faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
        
    return img
```

b. Face detection using OpenCV's dnn module
```python
import cv2
from cv2 import dnn

def detect_faces_dnn(img):
    model = 'face-detection-retail-0013.xml'  # or other pretrained model from OpenCV
    net = cv2.dnn.readNetFromTensorflow(model)
    
    img_blob = cv2.dnn.blobFromImage(img, 1/255, (416,416), swapRB=True, crop=False)
    net.setInput(img_blob)
    
    layerNames = [0]
    output = net.forward([layerNames])
    
    for detection in output[0, 0]:
        confidence = detection[2]
        
        if confidence > 0.5:
            x1 = int(detection[3][0]*img.shape[1])
            y1 = int(detection[3][1]*img.shape[0])
            x2 = int(detection[3][2]*img.shape[1])
            y2 = int(detection[3][3]*img.shape[0])
            
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
    
    return img
```

c. Face detection using dlib's HOG-based face detector
```python
import cv2
from dlib import get_frontal_face_detector

def detect_faces_hog(img):
    # Load the pre-trained face detector
    detector = get_frontal_face_detector()
    
    return [d.rectangle() for d in detector(img)]
```